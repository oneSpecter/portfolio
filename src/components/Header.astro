---
import { siteConfig } from "../config";

const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
const hasExperience = siteConfig.experience && siteConfig.experience.length > 0;
const hasEducation = siteConfig.education && siteConfig.education.length > 0;
---

<header
  id="header"
  style={`--accent-color: ${siteConfig.accentColor};`}
  class="fixed top-0 left-0 right-0 z-50 bg-[#f5f5f5]/70 dark:bg-[#000023]/70 backdrop-blur-sm transition-colors duration-300"
>
  <nav class="max-w-7xl mx-auto px-4 sm:px-8 py-4 relative flex items-center justify-between sm:justify-center">
    
    <!-- Pulsante hamburger (solo mobile) -->
    <button
      id="menu-toggle"
      class="sm:hidden p-3 text-lg rounded text-black dark:text-white hover:text-[var(--accent-color)] dark:hover:text-[var(--accent-color)] transition-colors"
      aria-label="Toggle menu"
    >
      â˜°
    </button>

    <!-- Menu -->
    <ul
      id="nav-links"
      class="hidden sm:flex items-center gap-6 sm:gap-10 text-base font-medium flex-col sm:flex-row absolute sm:static top-full left-0 w-full sm:w-auto bg-[#f5f5f5]/95 dark:bg-[#000023]/95 sm:bg-transparent sm:dark:bg-transparent backdrop-blur-sm sm:backdrop-blur-none sm:mt-0 p-5 pt-0 mt-0 sm:p-0 rounded-lg sm:rounded-none shadow-md sm:shadow-none"
    >
      <li><a href="#about" class="text-black dark:text-white hover:text-[var(--accent-color)] dark:hover:text-[var(--accent-color)] transition-colors">About</a></li>
      {hasProjects && <li><a href="#projects" class="text-black dark:text-white hover:text-[var(--accent-color)] dark:hover:text-[var(--accent-color)] transition-colors">Projects</a></li>}
      {hasExperience && <li><a href="#experience" class="text-black dark:text-white hover:text-[var(--accent-color)] dark:hover:text-[var(--accent-color)] transition-colors">Experience</a></li>}
      {hasEducation && <li><a href="#education" class="text-black dark:text-white hover:text-[var(--accent-color)] dark:hover:text-[var(--accent-color)] transition-colors">Education</a></li>}
    </ul>

    <!-- Switch tema -->
    <button
      id="theme-toggle"
      class="p-2 rounded text-black dark:text-white hover:text-[var(--accent-color)] dark:hover:text-[var(--accent-color)] transition-colors sm:absolute sm:right-4"
      aria-label="Toggle dark mode"
      type="button"
    >
      <svg id="theme-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6"></svg>
    </button>
  </nav>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const navLinks = document.getElementById("nav-links");
    const themeToggle = document.getElementById("theme-toggle");
    const themeIcon = document.getElementById("theme-icon");
    const html = document.documentElement;

    const iconSun = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-sun-icon lucide-sun"><circle cx="12" cy="12" r="4"/><path d="M12 2v2"/><path d="M12 20v2"/><path d="m4.93 4.93 1.41 1.41"/><path d="m17.66 17.66 1.41 1.41"/><path d="M2 12h2"/><path d="M20 12h2"/><path d="m6.34 17.66-1.41 1.41"/><path d="m19.07 4.93-1.41 1.41"/></svg>`;
    const iconMoon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-moon-icon lucide-moon"><path d="M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401"/></svg>`;

    function setIcon() {
      const isDark = html.classList.contains("dark");
      themeIcon.innerHTML = isDark ? iconSun : iconMoon;
    }

    function applyThemeFromStorage() {
      if (
        localStorage.theme === "dark" ||
        (!("theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        html.classList.add("dark");
      } else {
        html.classList.remove("dark");
      }
      setIcon();
    }

    function toggleTheme() {
      const isDark = html.classList.contains("dark");
      html.classList.toggle("dark", !isDark);
      localStorage.theme = isDark ? "light" : "dark";
      setIcon();
    }

    // Toggle menu mobile
    menuToggle?.addEventListener("click", () => {
      navLinks.classList.toggle("hidden");
      navLinks.classList.toggle("flex");
    });

    // Chiudi il menu al click su un link (mobile)
    navLinks.querySelectorAll("a").forEach(link => {
      link.addEventListener("click", () => {
        if (window.innerWidth < 640) { // sm breakpoint
          navLinks.classList.add("hidden");
          navLinks.classList.remove("flex");
        }
      });
    });

    // Tema iniziale
    applyThemeFromStorage();

    // Evento toggle tema
    themeToggle?.addEventListener("click", toggleTheme);
  });
</script>
